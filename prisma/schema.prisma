generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model user {
  id           String  @id @unique @default(uuid())
  email        String  @unique
  full_name    String
  avatar_url   String?
  bio          String?
  location     String?
  website      String?
  twitter      String?
  linkedin     String?
  github       String?
  instagram    String?
  youtube      String?
  tiktok       String?
  discord      String?
  telegram     String?
  bsky         String?
  contactEmail String?
  username     String? @unique

  paid        Boolean @default(false)
  customer_id String?
  plan_id     String?

  created_at        DateTime           @default(now())
  updated_at        DateTime           @updatedAt
  health_profile    health_profile?
  workouts          workout[]
  feedback          feedback[]
  exercises         exercises[]
  gamification      gamification?
  workout_frequency workout_frequency?
}

model waitlist {
  id         String   @id @default(uuid())
  email      String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model feedback {
  id         String   @id @default(uuid())
  user_id    String
  user       user     @relation(fields: [user_id], references: [id])
  message    String   @db.Text
  rating     Int // 1-5 rating scale
  category   String // e.g. "bug", "feature-request", "general"
  status     String   @default("pending") // e.g. "pending", "in-review", "resolved"
  upvotes    Int      @default(0)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([user_id])
}

model health_profile {
  id           String   @id @default(uuid())
  user_id      String   @unique
  user         user     @relation(fields: [user_id], references: [id])
  height       Float? // in cm
  weight       Float? // in kg
  sleep_hours  String? // less-6, 6-7, 7-8, more-8
  alcohol      String? // none, 1-3, 4-7, more
  sugar_intake String? // low, moderate, high
  is_smoker    Boolean? // true = smoker, false = non-smoker
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
}

model workout_exercise {
  id          String    @id @default(uuid())
  exercise_id String
  exercise    exercises @relation(fields: [exercise_id], references: [id])
  reps        Int?
  sets        Int?
  weight      Float?
  duration    Int?
  workout_id  String
  workout     workout   @relation(fields: [workout_id], references: [id])
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt

  @@index([exercise_id])
  @@index([workout_id])
}

model workout {
  id         String             @id @default(uuid())
  name       String
  user_id    String
  user       user               @relation(fields: [user_id], references: [id])
  selected   Boolean            @default(false)
  exercises  workout_exercise[]
  frequency  String? // Days of the week [1,2,3,4,5,6,7]
  created_at DateTime           @default(now())
  updated_at DateTime           @updatedAt

  @@index([user_id])
}

model exercises {
  id               String             @id @default(uuid())
  category         String // e.g. "Upper Body", "Lower Body", "Core"
  name             String // e.g. "Push-ups", "Bench Press"
  muscles          String[] // e.g. ["Chest", "Triceps", "Shoulders"]
  outcomes         String[] // e.g. ["Strength", "Hypertrophy"]
  reps             Int? // e.g. 20 pushups
  sets             Int? // e.g. 3 sets
  duration         Int? // e.g. 30 seconds
  weight           Float? // Optional: for weighted exercises (in kg)
  creator_id       String? // Optional: ID of user who created custom exercise
  creator_name     String? // gymbrah or community 
  creator          user?              @relation(fields: [creator_id], references: [id])
  created_at       DateTime           @default(now())
  updated_at       DateTime           @updatedAt
  workout_exercise workout_exercise[]

  @@index([creator_id])
}

model gamification {
  id                 String    @id @default(uuid())
  user_id            String    @unique
  user               user      @relation(fields: [user_id], references: [id])
  points             Int       @default(0)
  level              Int       @default(1)
  streak_days        Int       @default(0)
  longest_streak     Int       @default(0)
  workouts_completed Int       @default(0)
  achievements       String[]  @default([])
  badges             String[]  @default([])
  last_workout_date  DateTime?
  created_at         DateTime  @default(now())
  updated_at         DateTime  @updatedAt

  @@index([user_id])
}

model workout_frequency {
  id         String   @id @default(uuid())
  user_id    String   @unique
  user       user     @relation(fields: [user_id], references: [id])
  frequency  String? // Days of the week [1,2,3,4,5,6,7]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([user_id])
}
