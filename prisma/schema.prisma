generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model user {
  id           String  @id @unique @default(uuid())
  email        String  @unique
  full_name    String
  avatar_url   String?
  contactEmail String?
  username     String? @unique

  paid Boolean @default(false)

  created_at     DateTime        @default(now())
  updated_at     DateTime        @updatedAt
  workouts       workout[]
  feedback       feedback[]
  gamification   gamification?
  completed_sets completed_set[]
}

model plan {
  id      String @id @default(uuid())
  user_id String

  stripe_customer_id     String
  stripe_subscription_id String
  stripe_price_id        String
  plan_name              String
  subscription_status    Boolean @default(false)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([user_id])
}

model business {
  id      String @id @default(uuid())
  user_id String

  name     String
  address  String
  city     String
  province String
  zip      String
  country  String
  vat      String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([user_id])
}

model business_code {
  id          String @id @default(uuid())
  code        String
  business_id String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([business_id])
}

model athlete {
  id      String @id @default(uuid())
  user_id String

  business_code String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([user_id])
  @@index([business_code])
}

model client_athlete {
  id          String @id @default(uuid())
  client_id   String
  business_id String

  workout_id String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([client_id])
  @@index([business_id])
  @@index([workout_id])
}

model client {
  id          String  @id @default(uuid())
  user_id     String?
  business_id String

  name    String
  surname String
  email   String
  phone   String

  birth_date DateTime
  gender     String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([user_id])
  @@index([business_id])
}

model business_client_subscription {
  id          String @id @default(uuid())
  client_id   String
  business_id String

  sub_type     String // e.g. "monthly", "yearly"
  price        Float
  payment_date DateTime // date of payment 
  renewal_date DateTime // date of renewal
  months_paid  String // e.g. "1,2" to count how many months have been paid

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([client_id])
  @@index([business_id])
}

model waitlist {
  id         String   @id @default(uuid())
  email      String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model feedback {
  id         String   @id @default(uuid())
  user_id    String
  user       user     @relation(fields: [user_id], references: [id])
  message    String   @db.Text
  rating     Int // 1-5 rating scale
  category   String // e.g. "bug", "feature-request", "general"
  status     String   @default("pending") // e.g. "pending", "in-review", "resolved"
  upvotes    Int      @default(0)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([user_id])
}

model workout_exercise {
  id             String          @id @default(uuid())
  exercise_id    String
  exercise       exercises       @relation(fields: [exercise_id], references: [id])
  reps           Int?
  sets           Int?
  weight         Float?
  duration       Int?
  round          String?
  workout_id     String
  workout        workout         @relation(fields: [workout_id], references: [id])
  created_at     DateTime        @default(now())
  updated_at     DateTime        @updatedAt
  completed_sets completed_set[]

  @@index([exercise_id])
  @@index([workout_id])
}

model workout {
  id          String  @id @default(uuid())
  name        String
  user_id     String
  user        user    @relation(fields: [user_id], references: [id])
  business_id String?
  athlete_id  String?

  selected   Boolean            @default(false)
  exercises  workout_exercise[]
  frequency  String? // Days of the week [1,2,3,4,5,6,7]
  created_at DateTime           @default(now())
  updated_at DateTime           @updatedAt

  @@index([user_id])
  @@index([business_id])
  @@index([athlete_id])
}

model workout_athlete {
  id          String  @id @default(uuid())
  workout_id  String
  athlete_id  String
  business_id String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([workout_id])
  @@index([athlete_id])
  @@index([business_id])
}

model exercises {
  id                String   @id @unique
  name              String?
  body_part         String?
  equipment         String?
  gif_url           String?
  target            String?
  secondary_muscles String[]
  instructions      String[]
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  workout_exercise workout_exercise[]

  @@index([body_part])
  @@index([target])
  @@index([equipment])
}

model gamification {
  id                 String    @id @default(uuid())
  user_id            String    @unique
  user               user      @relation(fields: [user_id], references: [id])
  points             Int       @default(0)
  level              Int       @default(1)
  streak_days        Int       @default(0)
  longest_streak     Int       @default(0)
  workouts_completed Int       @default(0)
  achievements       String[]  @default([])
  badges             String[]  @default([])
  last_workout_date  DateTime?
  created_at         DateTime  @default(now())
  updated_at         DateTime  @updatedAt

  @@index([user_id])
}

model completed_set {
  id                  String           @id @default(uuid())
  workout_exercise_id String
  workout_exercise    workout_exercise @relation(fields: [workout_exercise_id], references: [id])
  user_id             String
  user                user             @relation(fields: [user_id], references: [id])
  completed_reps      Int
  set_number          Int
  created_at          DateTime         @default(now())
  updated_at          DateTime         @updatedAt

  @@index([workout_exercise_id])
  @@index([user_id])
}
